# logistic regression_bow_L1 regularization

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import roc_auc_score
import math
import scikitplot.metrics as skplt

x=preprocessed_reviews[:1000]
y=filtered_data['Score'][:1000]

x_tr, x_cv, y_tr, y_cv = train_test_split(x, y, test_size=0.2)
x_train, x_test, y_train, y_test = train_test_split(x_tr, y_tr, test_size=0.2)

bow=CountVectorizer()
x_train=bow.fit_transform(x_train)
x_cv=bow.transform(x_cv)
x_test=bow.transform(x_test)

auc_train_list=[]
auc_cv_list=[]
c=[10**-5, 10**-4, 10**-3, 10**-2, 10**-1, 1, 10**1, 10**2, 10**3, 10**4, 10**5]
for i in c:
    model=LogisticRegression(penalty='l1', C=i)
    model.fit(x_train, y_train)
    pred_train=model.predict_proba(x_train)[:,1]
    pred_cv=model.predict_proba(x_cv)[:,1]
    auc_cv=roc_auc_score(y_cv, pred_cv)
    auc_train=roc_auc_score(y_train, pred_train)
    auc_cv_list.append(auc_cv)
    auc_train_list.append(auc_train)
    #print('we are getting auc={x} for C={y}'.format(x=auc, y=i))
    
log_c = [math.log(i) for i in c]
print('we are getting max auc of {x} on C={y}'.format(x=max(auc_list), y=c[auc_list.index(max(auc_list))]))
plt.plot(log_c, auc_cv_list, label='CV data');
plt.plot(log_c, auc_train_list, label='Trian Data');
plt.legend()
plt.xlabel('C Value')
plt.ylabel('AUC')
plt.title('AUC wrt C')
plt.show()

print("Now let's train our test data with c={x}".format(x=c[auc_list.index(max(auc_list))]))
print('-'*14, 'finding auc', '-'*14)

model1=LogisticRegression(penalty='l1',C=c[auc_list.index(max(auc_list))])
model1.fit(x_train, y_train)
y_pred_test = model1.predict_proba(x_test)[:,1]
y_pred_test_1 = model1.predict(x_test)
y_pred_train_1 = model1.predict(x_train)

#plotting ROC curve of test data

tpr_test, fpr_test, threshold = roc_curve(y_test, y_pred_test_1)
tpr_train, fpr_train, threshold = roc_curve(y_train, y_pred_train_1)
plt.plot([0,1], [0,1], linestyle='--')
plt.plot(fpr_train, tpr_train, marker='.', label='Train Roc')
plt.plot(fpr_test, tpr_test, marker='.', label='Test Roc')
plt.legend()
plt.xlabel('False Psotive Rate')
plt.ylabel('True Positive Rate')
plt.show()

print('-'*12, 'plotting confusion matrix', '-'*12)
skplt.plot_confusion_matrix(y_test, y_pred_test_1);
