from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import roc_auc_score
import math


y=filtered_data['Score'][:1000]
x=pd.read_pickle('reviews.pkl')[:1000]

x_tr, x_test, y_tr, y_test = train_test_split(x,y,test_size=0.2)
x_train, x_cv, y_train, y_cv = train_test_split(x_tr, y_tr, test_size=0.2)

bow=CountVectorizer(min_df=10, max_features=500)
bow.fit(x_train)

x_train=bow.transform(x_train)
x_cv=bow.transform(x_cv)
x_test=bow.transform(x_test)

c=[10**-5, 10**-4, 10**-3, 10**-2, 10**-1, 1, 10**1, 10**2, 10**3, 10**4, 10**5]
c_1=[math.log(i) for i in c]
auc_train=[]
auc_cv=[]

for i in c:
    clf=SVC(C=i, kernel='rbf', probability=True)
    clf.fit(x_train, y_train)
    pred_cv=clf.predict_proba(x_cv)[:,1]
    pred_train=clf.predict_proba(x_train)[:,1]
    train_auc=roc_auc_score(y_train, pred_train)
    cv_auc=roc_auc_score(y_cv, pred_cv)
    auc_train.append(train_auc)
    auc_cv.append(cv_auc)
    print('AUC of {x} on c={x1}'.format(x=round(cv_auc,3), x1=i))
    
plt.figure(figsize=(14,7))
plt.plot(c_1, auc_train, label='Train Auc')
plt.plot(c_1, auc_cv, label='CV Auc')
plt.title('AUC plot')
plt.grid()
plt.legend()
plt.show()

####

print("Now let's find AUC on test data")

clf_1=SVC(C=1000, kernel='rbf', probability=True)
clf_1.fit(x_train, y_train)
pred_test=clf.predict_proba(x_test)[:,1]
pred_train=clf.predict_proba(x_train)[:,1]
pred_test_1=clf.predict(x_test)
pred_train_1=clf.predict(x_train)

fpr_test, tpr_test, threshold=roc_curve(y_test, pred_test)
fpr_train, tpr_train, threshold=roc_curve(y_train, pred_train)

plt.figure(figsize=(14,7))
plt.plot(fpr_test, tpr_test, marker='.', label='Test auc={x}'.format(x=round(auc(fpr_test,tpr_test),3)))
plt.plot(fpr_train, tpr_train, marker='.', label='Train auc={x}'.format(x=round(auc(fpr_train, tpr_train),3)))
plt.plot([0,1], [0,1], linestyle='--')
plt.legend()
plt.title('ROC Curve')
plt.xlabel('False Postive Rate')
plt.ylabel('True Positive rate')
plt.show()

skplt.plot_confusion_matrix(y_test, pred_test_1);
plt.title('Confusion matrix Test')
plt.show();

skplt.plot_confusion_matrix(y_train, pred_train_1)
plt.title('Confusion matrix Train')
plt.show()
