from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import roc_auc_score
from mpl_toolkits.mplot3d import Axes3D
import scikitplot.metrics as skplt

x=preprocessed_reviews[:4500]
y=filtered_data['Score'][:4500]

x_tr, x_test, y_tr, y_test = train_test_split(x, y, test_size=0.2)
x_train, x_cv, y_train, y_cv = train_test_split(x_tr, y_tr, test_size=0.2)
bow=CountVectorizer()

X_train=bow.fit_transform(x_train)
X_cv=bow.transform(x_cv)
X_test=bow.transform(x_test)

auc_list=[]
auc_list_train=[]
depth_list=[]
split_list=[]

sample_split_range = [5,10,100,500]
depth_range = [1,5,10,50,100,500,1000]
for i in depth_range:
    for j in sample_split_range:
        dst=DecisionTreeClassifier(max_depth=i, min_samples_split=j)
        dst.fit(X_train, y_train)
        dst_pred = dst.predict_proba(X_cv)[:,1]
        dst_auc = roc_auc_score(y_cv, dst_pred)
        dst_pred_train = dst.predict_proba(X_train)[:,1]
        dst_auc_train = roc_auc_score(y_train, dst_pred_train)        
        auc_list.append(dst_auc)
        auc_list_train.append(dst_auc_train)
        depth_list.append(i)
        split_list.append(j)
        #print('auc', dst_auc, ' depth',i, ' split',j)
    #print('-'*8)
print('we are getting maximum AUC of {x} on sample_split {x1} and on max_depth {x2}'.format(x=max(auc_list), x1=split_list[auc_list.index(max(auc_list))], x2=depth_list[auc_list.index(max(auc_list))]))
print('-'*20)
print("Now let's train our test data on on sample_split {x1} and on max_depth {x2}".format(x1=split_list[auc_list.index(max(auc_list))], x2=depth_list[auc_list.index(max(auc_list))]))

print('•'*17,'Traning', '•'*17)

model_1=DecisionTreeClassifier(max_depth=depth_list[auc_list.index(max(auc_list))], min_samples_split=split_list[auc_list.index(max(auc_list))])
model_1.fit(X_train, y_train)
pred_test = model_1.predict_proba(X_test)[:,1]
pred_test_1 = model_1.predict(X_test)
pred_train_1 = model_1.predict(X_train)
auc_test = roc_auc_score(y_test, pred_test)

print('we are getting AUC of {x} on test data'.format(x=auc_test))
fig = plt.figure(figsize=(7,7))

ax = fig.gca(projection='3d')
ax.plot(depth_list, split_list, auc_list, label='X_cv')
ax.plot(depth_list, split_list, auc_list_train, label='X_train')
plt.xlabel('Depth of DT')
plt.ylabel('Split of DT')
ax.legend()
plt.show()

#ROC
tpr_test, fpr_test, threshold = roc_curve(y_test, pred_test_1)
tpr_train, fpr_train, threshold = roc_curve(y_train, pred_train_1)
plt.plot([0,1], [0,1], linestyle='--')
plt.plot(fpr_test, tpr_test, marker='.', label='Test_ROC')

plt.plot(fpr_train, tpr_train, marker='.', label='Train_ROC')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.show()

skplt.plot_confusion_matrix(y_test, pred_test_1);
